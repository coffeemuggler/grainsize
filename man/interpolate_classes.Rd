% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interpolate_classes.R
\name{interpolate_classes}
\alias{interpolate_classes}
\title{Interpolate data between different classes.}
\usage{
interpolate_classes(data, boundaries_in, boundaries_out, method = "natural",
  fixed = TRUE)
}
\arguments{
\item{data}{\code{Numeric} matrix, input data set with m samples (rows) 
and n variables (columns).}

\item{boundaries_in}{\code{Numeric} vector, class boundaries of the 
input data.}

\item{boundaries_out}{\code{Numeric} vector, class boundaries of the output
data.}

\item{method}{\code{Logical} scalar, interpolation method, one out of 
"linear" (linear interpolation), "fmm" (cubic spline), "natural" 
(natural spline), "periodic" (periodic spline). Default is \code{"natural"}.}

\item{fixed}{\code{Logical} value, specifying if the outer boundaries 
should be set to the same values as in the original matrix, default is 
\code{TRUE}. This may become necessary to avoid interpolation errors, see 
example.}
}
\value{
\code{Numeric} matrix, interpolated class values.
}
\description{
Interpolate grain-size data for different classes, either to 
higher or to lower resolution.
}
\examples{

## load example data
data(LA950, envir = environment())

## convert units to phi-scale
classes_in <- convert_units(mu = LA950$x)

## Example 1 - decrease the class numbers
## define number of output classes
classes_out <- seq(from = max(classes_in), 
                   to = min(classes_in), 
                   length.out = 20)
                   
## interpolate the data set
Y <- interpolate_classes(data = LA950$y, 
                         boundaries_in = classes_in, 
                         boundaries_out = classes_out,
                         method = "linear")
                         
## show original vs. interpolation for first 10 samples
plot(NA, xlim = range(classes_in), ylim = range(LA950$y))
lines(classes_in, LA950$y)
lines(classes_out, Y, col = 2)

## Example 2 - increase the class numbers
## define number of output classes
classes_out <- seq(from = max(classes_in), 
                   to = min(classes_in), 
                   length.out = 200)

## interpolate the data set
Y <- interpolate_classes(data = LA950$y, 
                         boundaries_in = classes_in, 
                         boundaries_out = classes_out,
                         method = "linear")

## show original vs. interpolation for first 10 samples
plot(NA, xlim = range(classes_in), ylim = range(LA950$y))
lines(classes_in, LA950$y)
lines(classes_out, Y, col = 2)

}
\author{
Michael Dietze
}
\keyword{grainsize}
